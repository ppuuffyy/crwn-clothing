{"ast":null,"code":"var _jsxFileName = \"/Users/mogyorosistefan/Documents/Complete React Dev 2020/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.util';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections'); // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionMap);\n    //     this.setState({loading: false});\n    // });\n\n    collectionRef.get().then(snapshot => {\n      const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionMap);\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromSnapshot();\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 23\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/mogyorosistefan/Documents/Complete React Dev 2020/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","CollectionsOverview","CollectionPage","updateCollections","firestore","convertCollectionsSnapshotToMap","WithSpinner","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","get","then","snapshot","collectionMap","setState","componentWillUnmount","render","match","path","mapDispatchToProps","dispatch","collectionsMap"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,8BAAzD;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,MAAMC,8BAA8B,GAAGD,WAAW,CAACL,mBAAD,CAAlD;AACA,MAAMO,yBAAyB,GAAGF,WAAW,CAACJ,cAAD,CAA7C;;AAEA,MAAMO,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAwC;AAAA;AAAA;AAAA,SAQpCC,KARoC,GAQ5B;AACJC,MAAAA,OAAO,EAAE;AADL,KAR4B;AAAA,SAYpCC,uBAZoC,GAYV,IAZU;AAAA;;AAcpCC,EAAAA,iBAAiB,GAAE;AACf,UAAM;AAACX,MAAAA;AAAD,QAAsB,KAAKY,KAAjC;AACA,UAAMC,aAAa,GAAGZ,SAAS,CAACa,UAAV,CAAqB,aAArB,CAAtB,CAFe,CAGf;AACA;AACA;AACA;AACA;;AAEAD,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAA0BC,QAAQ,IAAI;AAClC,YAAMC,aAAa,GAAGhB,+BAA+B,CAACe,QAAD,CAArD;AACAjB,MAAAA,iBAAiB,CAACkB,aAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AAACV,QAAAA,OAAO,EAAE;AAAV,OAAd;AACH,KAJD;AAMH;;AAEDW,EAAAA,oBAAoB,GAAG;AACnB,SAAKV,uBAAL;AACH;;AAEDW,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKV,KAArB;AACA,UAAM;AAACH,MAAAA;AAAD,QAAY,KAAKD,KAAvB;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,EAAG,GAAEc,KAAK,CAACC,IAAK,EAFxB;AAGI,MAAA,MAAM,EAAEX,KAAK,iBACX,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEH;AAA3C,SAAwDG,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eASI,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAEU,KAAK,CAACC,IAAK,gBADtB;AAEE,MAAA,MAAM,EAAEX,KAAK,iBACX,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEH;AAAtC,SAAmDG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,CADJ;AAkBH;;AAzDmC;;AA4DpC,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AACpCzB,EAAAA,iBAAiB,EAAE0B,cAAc,IAAID,QAAQ,CAACzB,iBAAiB,CAAC0B,cAAD,CAAlB;AADT,CAAL,CAAnC;;AAIJ,eAAe7B,OAAO,CAAC,IAAD,EAAM2B,kBAAN,CAAP,CAAiClB,QAAjC,CAAf","sourcesContent":["import React from 'react';\nimport {Route} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport {updateCollections} from '../../redux/shop/shop.actions';\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.util';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component  {\n    // constructor(){\n    //     super();\n    //     this.state = {\n    //         loading: true\n    //     }\n    // }\n\n    state = {\n        loading: true\n    };\n\n    unsubscribeFromSnapshot = null;\n\n    componentDidMount(){\n        const {updateCollections} = this.props;\n        const collectionRef = firestore.collection('collections');\n        // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n        //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n        //     updateCollections(collectionMap);\n        //     this.setState({loading: false});\n        // });\n        \n        collectionRef.get().then( snapshot => {\n            const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n            updateCollections(collectionMap);\n            this.setState({loading: false});\n        });\n\n    };\n\n    componentWillUnmount() {\n        this.unsubscribeFromSnapshot();\n    };\n    \n    render(){\n        const {match} = this.props;\n        const {loading} = this.state;\n\n        return (\n            <div className='shop-page'> \n                <Route\n                    exact\n                    path={`${match.path}`}\n                    render={props => (\n                      <CollectionsOverviewWithSpinner isLoading={loading} {...props} />\n                    )}\n                />\n\n                <Route\n                  path={`${match.path}/:collectionId`}\n                  render={props => (\n                    <CollectionPageWithSpinner isLoading={loading} {...props} />\n                  )}\n                />\n            </div>\n        );\n    }\n    }\n\n    const mapDispatchToProps = dispatch => ({\n        updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n    })\n\nexport default connect(null,mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}