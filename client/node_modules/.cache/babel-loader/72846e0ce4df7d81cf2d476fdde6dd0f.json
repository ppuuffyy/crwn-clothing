{"ast":null,"code":"var _jsxFileName = \"/Users/mogyorosistefan/Documents/Complete React Dev 2020/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect'; //import CollectionsOverview from '../../components/collections-overview/collections-overview.component';\n\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionsLoaded } from '../../redux/shop/shop.selector'; //import WithSpinner from '../../components/with-spinner/with-spinner.component';\n//const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n//const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // constructor(){\n  //     super();\n  //     this.state = {\n  //         loading: true\n  //     }\n  // }\n  // state = {\n  //     loading: true\n  // };\n  // unsubscribeFromSnapshot = null;\n  componentDidMount() {\n    //const {updateCollections} = this.props;\n    //const collectionRef = firestore.collection('collections');\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionMap);\n    //     this.setState({loading: false});\n    // });\n    // collectionRef.get().then(snapshot => {\n    //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionMap);\n    //     this.setState({loading: false});\n    // });\n    // fetch('https://firestore.googleapis.com/v1/projects/crwn-db-e66f1/databases/(default)/documents/collections')\n    //     .then(response => response.json()).then(collections => console.log(collections));\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  componentWillUnmount() {//  this.unsubscribeFromSnapshot();\n  }\n\n  render() {\n    const {\n      match\n    } = this.props; //const {loading} = this.state;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      component: CollectionsOverviewContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      component: CollectionPageContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }));\n  }\n\n} // const mapStateToProps = createStructuredSelector({\n//    // isCollectionFetching: selectIsCollectionFetching,\n//     isCollectionsLoaded: selectIsCollectionsLoaded\n// });\n\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/mogyorosistefan/Documents/Complete React Dev 2020/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","createStructuredSelector","CollectionsOverviewContainer","CollectionPageContainer","fetchCollectionsStartAsync","selectIsCollectionsLoaded","ShopPage","Component","componentDidMount","props","componentWillUnmount","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,wBAAR,QAAuC,UAAvC,C,CAEA;;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,SAAQC,0BAAR,QAAyC,+BAAzC;AACA,SAASC,yBAAT,QAAyC,gCAAzC,C,CAEA;AAEA;AACA;;AAEA,MAAMC,QAAN,SAAuBR,KAAK,CAACS,SAA7B,CAAwC;AACpC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEAC,EAAAA,iBAAiB,GAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,UAAM;AAACJ,MAAAA;AAAD,QAA+B,KAAKK,KAA1C;AACAL,IAAAA,0BAA0B;AAE7B;;AAEDM,EAAAA,oBAAoB,GAAG,CACrB;AACD;;AAEDC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKH,KAArB,CADI,CAEJ;;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,EAAG,GAAEG,KAAK,CAACC,IAAK,EAFxB;AAGI,MAAA,SAAS,EAAEX,4BAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAOI,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAEU,KAAK,CAACC,IAAK,gBADtB;AAEE,MAAA,SAAS,EAAEV,uBAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADJ;AAcH;;AA1DmC,C,CA6DpC;AACA;AACA;AACA;;;AAEA,MAAMW,kBAAkB,GAAGC,QAAQ,KAAK;AACpCX,EAAAA,0BAA0B,EAAE,MAAMW,QAAQ,CAACX,0BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAIJ,eAAeJ,OAAO,CAAC,IAAD,EAAOc,kBAAP,CAAP,CAAkCR,QAAlC,CAAf","sourcesContent":["import React from 'react';\nimport {Route} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {createStructuredSelector} from 'reselect'\n\n//import CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\nimport {fetchCollectionsStartAsync} from '../../redux/shop/shop.actions';\nimport { selectIsCollectionsLoaded} from '../../redux/shop/shop.selector';\n\n//import WithSpinner from '../../components/with-spinner/with-spinner.component';\n\n//const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n//const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component  {\n    // constructor(){\n    //     super();\n    //     this.state = {\n    //         loading: true\n    //     }\n    // }\n\n    // state = {\n    //     loading: true\n    // };\n\n    // unsubscribeFromSnapshot = null;\n\n    componentDidMount(){\n        //const {updateCollections} = this.props;\n        //const collectionRef = firestore.collection('collections');\n        // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n        //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n        //     updateCollections(collectionMap);\n        //     this.setState({loading: false});\n        // });\n        \n        // collectionRef.get().then(snapshot => {\n        //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n        //     updateCollections(collectionMap);\n        //     this.setState({loading: false});\n        // });\n\n        // fetch('https://firestore.googleapis.com/v1/projects/crwn-db-e66f1/databases/(default)/documents/collections')\n        //     .then(response => response.json()).then(collections => console.log(collections));\n        const {fetchCollectionsStartAsync} = this.props;\n        fetchCollectionsStartAsync();\n\n    };\n\n    componentWillUnmount() {\n      //  this.unsubscribeFromSnapshot();\n    };\n    \n    render(){\n        const {match} = this.props;\n        //const {loading} = this.state;\n\n        return (\n            <div className='shop-page'> \n                <Route\n                    exact\n                    path={`${match.path}`}\n                    component={CollectionsOverviewContainer}\n                />\n\n                <Route\n                  path={`${match.path}/:collectionId`}\n                  component={CollectionPageContainer}\n                />\n            </div>\n        );\n    }\n    }\n\n    // const mapStateToProps = createStructuredSelector({\n    //    // isCollectionFetching: selectIsCollectionFetching,\n    //     isCollectionsLoaded: selectIsCollectionsLoaded\n    // });\n\n    const mapDispatchToProps = dispatch => ({\n        fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n    });\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}