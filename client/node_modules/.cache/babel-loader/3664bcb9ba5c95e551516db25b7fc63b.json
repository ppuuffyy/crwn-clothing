{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBtKoX3Sx_GPA_X3PCUavXoZasKNRrfmD8\",\n  authDomain: \"crwn-db-e66f1.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-e66f1.firebaseio.com\",\n  projectId: \"crwn-db-e66f1\",\n  storageBucket: \"crwn-db-e66f1.appspot.com\",\n  messagingSenderId: \"492066227811\",\n  appId: \"1:492066227811:web:6689059146634d6e50da56\",\n  measurementId: \"G-3EPX0K80VM\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } // console.log(snapShot);\n\n\n  return userRef;\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title: title,\n      items: items\n    };\n  });\n  return transformedCollections.reduce((acc, collectionObj) => {\n    acc[collectionObj.title.toLowerCase()] = collectionObj;\n    return acc;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(object => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, object);\n  });\n  return await batch.commit();\n};\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/mogyorosistefan/Documents/Complete React Dev 2020/crwn-clothing/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","acc","collectionObj","initializeApp","auth","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","object","newDocRef","commit","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\nconst config = {\n    apiKey: \"AIzaSyBtKoX3Sx_GPA_X3PCUavXoZasKNRrfmD8\",\n    authDomain: \"crwn-db-e66f1.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-e66f1.firebaseio.com\",\n    projectId: \"crwn-db-e66f1\",\n    storageBucket: \"crwn-db-e66f1.appspot.com\",\n    messagingSenderId: \"492066227811\",\n    appId: \"1:492066227811:web:6689059146634d6e50da56\",\n    measurementId: \"G-3EPX0K80VM\"\n}\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    \n    if (!userAuth) return;\n\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapShot = await userRef.get();\n    if (!snapShot.exists){\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n        try{\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            });\n\n        } catch (error){\n            console.log('error creating user', error.message);\n        }\n        \n    }\n\n   // console.log(snapShot);\n    return userRef;\n\n\n}\n\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n    const transformedCollections = collections.docs.map(doc => {\n        const {title, items} = doc.data();\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title: title,\n            items: items\n        }\n    })\n\n    return transformedCollections.reduce((acc, collectionObj) => {\n        acc[collectionObj.title.toLowerCase()] = collectionObj;\n        return acc;\n    },{});\n}\n\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n\n\n    const batch = firestore.batch();\n    objectsToAdd.forEach(object => {\n        const newDocRef = collectionRef.doc();\n        batch.set(newDocRef, object);\n    });\n    return await batch.commit();\n\n}\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}