{"ast":null,"code":"var _jsxFileName = \"/Users/mogyorosistefan/Documents/Complete React Dev 2020/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React, { useEffect } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux'; //import {createStructuredSelector} from 'reselect'\n//import CollectionsOverview from '../../components/collections-overview/collections-overview.component';\n\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions'; //import { selectIsCollectionsLoaded} from '../../redux/shop/shop.selector';\n//import WithSpinner from '../../components/with-spinner/with-spinner.component';\n//const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n//const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = ({\n  fetchCollectionsStartAsync,\n  match\n}) => {\n  // constructor(){\n  //     super();\n  //     this.state = {\n  //         loading: true\n  //     }\n  // }\n  // state = {\n  //     loading: true\n  // };\n  // unsubscribeFromSnapshot = null;\n  //componentDidMount(){\n  //const {updateCollections} = this.props;\n  //const collectionRef = firestore.collection('collections');\n  // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n  //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n  //     updateCollections(collectionMap);\n  //     this.setState({loading: false});\n  // });\n  // collectionRef.get().then(snapshot => {\n  //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n  //     updateCollections(collectionMap);\n  //     this.setState({loading: false});\n  // });\n  // fetch('https://firestore.googleapis.com/v1/projects/crwn-db-e66f1/databases/(default)/documents/collections')\n  //     .then(response => response.json()).then(collections => console.log(collections));\n  //     const {fetchCollectionsStartAsync} = this.props;\n  //     fetchCollectionsStartAsync();\n  // };\n  // componentWillUnmount() {\n  //   //  this.unsubscribeFromSnapshot();\n  // };\n  //const {match} = this.props;\n  //const {loading} = this.state;\n  useEffect(() => {\n    fetchCollectionsStartAsync();\n  }, [fetchCollectionsStartAsync]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shop-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    component: CollectionsOverviewContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    component: CollectionPageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }));\n}; // const mapStateToProps = createStructuredSelector({\n//    // isCollectionFetching: selectIsCollectionFetching,\n//     isCollectionsLoaded: selectIsCollectionsLoaded\n// });\n\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/mogyorosistefan/Documents/Complete React Dev 2020/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","Route","connect","CollectionsOverviewContainer","CollectionPageContainer","fetchCollectionsStartAsync","ShopPage","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CACA;AAEA;;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,SAAQC,0BAAR,QAAyC,+BAAzC,C,CACA;AAEA;AAEA;AACA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACD,EAAAA,0BAAD;AAA6BE,EAAAA;AAA7B,CAAD,KAA0C;AACvD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACJ;AACA;AAEA;AAEA;AACA;AACA;AAGI;AACA;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,0BAA0B;AAC7B,GAFQ,EAEN,CAACA,0BAAD,CAFM,CAAT;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AACI,IAAA,KAAK,MADT;AAEI,IAAA,IAAI,EAAG,GAAEE,KAAK,CAACC,IAAK,EAFxB;AAGI,IAAA,SAAS,EAAEL,4BAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAOI,oBAAC,KAAD;AACE,IAAA,IAAI,EAAG,GAAEI,KAAK,CAACC,IAAK,gBADtB;AAEE,IAAA,SAAS,EAAEJ,uBAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADJ;AAeH,CAhEL,C,CAkEI;AACA;AACA;AACA;;;AAEA,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK;AACpCL,EAAAA,0BAA0B,EAAE,MAAMK,QAAQ,CAACL,0BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAIJ,eAAeH,OAAO,CAAC,IAAD,EAAOO,kBAAP,CAAP,CAAkCH,QAAlC,CAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport {Route} from 'react-router-dom';\nimport {connect} from 'react-redux';\n//import {createStructuredSelector} from 'reselect'\n\n//import CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\nimport {fetchCollectionsStartAsync} from '../../redux/shop/shop.actions';\n//import { selectIsCollectionsLoaded} from '../../redux/shop/shop.selector';\n\n//import WithSpinner from '../../components/with-spinner/with-spinner.component';\n\n//const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n//const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = ({fetchCollectionsStartAsync, match}) =>  {\n    // constructor(){\n    //     super();\n    //     this.state = {\n    //         loading: true\n    //     }\n    // }\n\n    // state = {\n    //     loading: true\n    // };\n\n    // unsubscribeFromSnapshot = null;\n\n    //componentDidMount(){\n        //const {updateCollections} = this.props;\n        //const collectionRef = firestore.collection('collections');\n        // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n        //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n        //     updateCollections(collectionMap);\n        //     this.setState({loading: false});\n        // });\n        \n        // collectionRef.get().then(snapshot => {\n        //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n        //     updateCollections(collectionMap);\n        //     this.setState({loading: false});\n        // });\n\n        // fetch('https://firestore.googleapis.com/v1/projects/crwn-db-e66f1/databases/(default)/documents/collections')\n        //     .then(response => response.json()).then(collections => console.log(collections));\n    //     const {fetchCollectionsStartAsync} = this.props;\n    //     fetchCollectionsStartAsync();\n\n    // };\n\n    // componentWillUnmount() {\n    //   //  this.unsubscribeFromSnapshot();\n    // };\n    \n\n        //const {match} = this.props;\n        //const {loading} = this.state;\n\n        useEffect(() => {\n            fetchCollectionsStartAsync();\n        }, [fetchCollectionsStartAsync]);\n\n\n        return (\n            <div className='shop-page'> \n                <Route\n                    exact\n                    path={`${match.path}`}\n                    component={CollectionsOverviewContainer}\n                />\n\n                <Route\n                  path={`${match.path}/:collectionId`}\n                  component={CollectionPageContainer}\n                />\n            </div>\n        );\n    \n    }\n\n    // const mapStateToProps = createStructuredSelector({\n    //    // isCollectionFetching: selectIsCollectionFetching,\n    //     isCollectionsLoaded: selectIsCollectionsLoaded\n    // });\n\n    const mapDispatchToProps = dispatch => ({\n        fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n    });\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}